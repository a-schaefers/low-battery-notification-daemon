#!/bin/sh

# MIT License

# Copyright (c) 2018 Adam Schaefers sch@efers.org

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
#    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#    copies of the Software, and to permit persons to whom the Software is
#    furnished to do so, subject to the following conditions:

#    The above copyright notice and this permission notice shall be included in all
#    copies or substantial portions of the Software.

#    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#    SOFTWARE.

about() {
    cat << EOF
Project Home:

    https://github.com/a-schaefers/simple-power-manager

About simple-power-manager:

    Simple Power Manager is a programmable shell script daemon that performs
    actions based on power thresholds. By default simple-power-manager is
    pre-configured to send desktop notifications using notify-send and adjust
    brightness levels using xbacklight. Being "programmable," edit
    ~/.config/simple-power-manager/config to make it do almost anything.
    Simple Power Manager can be thought of as a lightweight alternative to
    similar applications such as xfce-power-manager and mate-power-manager.
EOF
}

help() {
    cat << EOF
Usage: simple-power-manager [OPTION...]

  -d, --daemon               start the daemon and fork the process
  -D, --default              regenerates the default configuration file to $HOME/.config/simple-power-manager/config
  --reload                   reload the configuration file
  --restart                  wipe simple-power-manager temporary state (from /tmp) and restart the daemon
  --sleep                    put the daemon in a sleep loop
  --awake                    awake the daemon from a sleep loop
  --status                   display whether the state is running (awake) or paused (asleep)
  --about                    display more information about this program
  -h, --help                 display this help menu
EOF
}

acpi_info() {
    acpi="$(acpi | awk '{print $3 $4}')"
    batt="${acpi#*,}" ; batt="${batt%\%*}"
    acpi_status="${acpi%%,*}"
}

daemon_start() {
    if [ -z "$FORCE" ]; then
        number_of_instances ; if [ "$spmcount" -gt 2 ]; then die "Simple Power Manager is already running"; fi
    fi
    while true; do
        # if daemon is locked, enter a sleep loop
        until [ ! -f /tmp/simple-power-manager/state/lock ]; do sleep 1; done

        # one-time setup
        if [ ! -d /tmp/simple-power-manager ];then
            # verify acpi is available and create dir structure in /tmp
            command -v acpi > /dev/null || die "acpi not found"
            mkdir -p /tmp/simple-power-manager/state || die "/tmp is not writeable"

            # create default user local dir structure
            [ ! -d "$HOME/.config/simple-power-manager" ] && mkdir -p "$HOME/.config/simple-power-manager"
            [ ! -f "$HOME/.config/simple-power-manager/config" ] &&  make_defconfig
        fi

        # sourcing of the user config file happens now
        if [ -f "/tmp/simple-power-manager/config" ];then
            . "/tmp/simple-power-manager/config"
        else
            daemon_reload
            . "/tmp/simple-power-manager/config"
        fi

        # get battery % and status
        acpi_info

        # set thresholds "array"
        batt_thresholds="99 80 40 20 10 5"

        # if trigger has not already been fired, and if battery % is less than or equal
        # to a threshold and if battery state is Discharging, then run user_custom_low_battery_hook
        if [ "$acpi_status" = "Discharging" ];then
            echo "$batt_thresholds" | tr ' ' '\n' | while read -r state; do
                if [ "$batt" -eq "$state" ] || [ "$batt" -lt "$state" ]; then
                    if [ ! -f "/tmp/simple-power-manager/state/$state" ]; then
                        if [ -f "/tmp/simple-power-manager/state/100" ]; then rm /tmp/simple-power-manager/state/100; fi
                        touch "/tmp/simple-power-manager/state/$state"
                        user_custom_low_battery_hook
                    fi
                fi
            done
        fi

        # if trigger has not already been fired, and if battery state is Charging or
        # Full, then run user_custom_battery_normal_hook
        if [ "$acpi_status" = "Charging" ] || [ "$acpi_status" = "Full" ]
        then
            if [ ! -f "/tmp/simple-power-manager/state/100" ];then
                echo "$batt_thresholds" | tr ' ' '\n' | while read -r state; do
                    [ -f "/tmp/simple-power-manager/state/$state" ]&&  rm "/tmp/simple-power-manager/state/$state"
                done
                touch /tmp/simple-power-manager/state/100
                user_custom_battery_normal_hook
            fi
        fi
    done & # fork the process
}

make_defconfig() {
    if [ ! -f "$HOME/.config/simple-power-manager/config" ];then
        cat <<EOF > "$HOME/.config/simple-power-manager/config"
#################################################################################
# simple-power-manager configuration - /bin/sh - it's shell script, be careful! #
#################################################################################

# battery polling frequency
sleep 5

user_custom_low_battery_hook() {
    if [ "\$batt" -lt 100 ] && [ "\$batt" -gt 80 ]; then
        # 80-99% battery
        echo # do nothing

     elif [ "\$batt" -lt 81 ] && [ "\$batt" -gt 40 ]; then
        # 40-80% battery
        echo # do nothing

     elif [ "\$batt" -lt 41 ] && [ "\$batt" -gt 20 ]; then
        # 20-40% battery
        echo # do nothing

     elif [ "\$batt" -lt 21 ] && [ "\$batt" -gt 10 ]; then
        # 10-20% battery
        notify-send "Battery: \$batt"
        xbacklight -set 20

     elif [ "\$batt" -lt 11 ] && [ "\$batt" -gt 5 ]; then
        # 5-10% battery
        notify-send "Battery: \$batt"
        xbacklight -set 10

     elif [ "\$batt" -lt 6 ]; then
        # 5% battery or less
        notify-send "Battery: \$batt"
        xbacklight -set 5
    fi
}

user_custom_battery_normal_hook() {
    # battery Charging / Full
    notify-send "Battery: \$acpi_status \$batt"
    xbacklight -set 80
}
EOF
        echo "Configuration script written to $HOME/.config/simple-power-manager/config"
        echo "Please modify it accordingly before running simple-power-manager again."
    else
        die "Configuration script already exists in $HOME/.config/simple-power-manager/config"
    fi
}

daemon_restart() {
    restart() {
        rm -rf /tmp/simple-power-manager && \
            echo "Cleaning /tmp/simple-power-manager"
        FORCE=1 simple-power-manager -d && \
            echo "Restarting Daemon"
    }
    trap restart TERM
    killall simple-power-ma
}

daemon_reload() {
    cp "$HOME/.config/simple-power-manager/config" /tmp/simple-power-manager/config && \
        echo "User configuration loaded."
}

daemon_sleep() {
    touch /tmp/simple-power-manager/state/lock && \
        echo "Simple Power Manager daemon is sleeping."
}

daemon_awake() {
    rm /tmp/simple-power-manager/state/lock && \
        echo "Simple Power Manager daemon is running."
}

daemon_status() {
    acpi_info ; echo "Battery: $acpi_status $batt"
    number_of_instances
    if [ "$spmcount" -lt 3 ]; then
        die "Simple Power Manager is not running."
    elif [ ! -f /tmp/simple-power-manager/state/lock ]; then
        if [ "$spmcount" -eq 3 ]; then echo "Simple Power Manager daemon is running."; fi
    else
        if [ "$spmcount" -eq 3 ]; then echo "Simple Power Manager daemon is sleeping."; fi
    fi
}

number_of_instances() { spmcount="$(pgrep simple-power-ma | wc -l)"; }

die() {
    [ $# -gt 0 ] && printf -- "%s\n" "$(tput setaf 1)$*"
    exit 1
}

[ ! $# -eq 1 ] && help && exit 1
case $1 in
    -d        ) daemon_start ;;
    --daemon  ) daemon_start ;;
    -D        ) make_defconfig ;;
    --default ) make_defconfig ;;
    --reload  ) daemon_reload ;;
    --sleep   ) daemon_sleep ;;
    --awake   ) daemon_awake ;;
    --status  ) daemon_status ;;
    --restart ) daemon_restart ;;
    --about   ) about ;;
    -h        ) help ;;
    --help    ) help ;;
    *         ) help; exit 1 ;;
esac
